#include <iostream>
#include <vector>
#include "../utils/TreeNode.h"

/**
 * 1、审题：
 * - 输入一棵二叉树，树中每个节点都有其节点值，在这棵二叉树中找到一条路径，路径中所有结点的和最大
 * 2、解题：
 * - 深度优先遍历，从当前树中不同的叶子结点开始，不断往相邻的结点开始遍历，直到找到另一个叶子结点，这就是一条路径了
 * - 二叉树的结点，数据结构中，只存储了左右子节点的指针，
 */
int maxPathSum(TreeNode *root)
{
}

/**
 * 二叉树中的 路径 被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中 至多出现一次 。
 * 该路径 至少包含一个 节点，且不一定经过根节点。路径和 是路径中各节点值的总和。
 * 给你一个二叉树的根节点 root ，返回其 最大路径和 。
 *
示例 1：
输入：root = [1,2,3]
输出：6
解释：最优路径是 2 -> 1 -> 3 ，路径和为 2 + 1 + 3 = 6

示例 2：
输入：root = [-10,9,20,null,null,15,7]
输出：42
解释：最优路径是 15 -> 20 -> 7 ，路径和为 15 + 20 + 7 = 42

提示：
树中节点数目范围是 [1, 3 * 104]
-1000 <= Node.val <= 1000
 */
int main(int argc, char const *argv[])
{
    return 0;
}
